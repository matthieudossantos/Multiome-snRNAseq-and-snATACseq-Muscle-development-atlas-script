library(SoupX)
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(cowplot)
library(Signac)
library(Seurat)
library(GenomeInfoDb)
library(EnsDb.Mmusculus.v79)
library(ggplot2)
library(patchwork)
library(BSgenome.Mmusculus.UCSC.mm10)
set.seed(1234)
library(JASPAR2020)
library(TFBSTools)
library(GenomicRanges)
library(future)
library(sctransform)
library(motifmatchr)


counts <- Read10X_h5("/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE14/outs/filtered_feature_bc_matrix.h5")
E14 <- CreateSeuratObject(
  counts = counts$`Gene Expression`,
  assay = "RNA", project = "E14"
)

counts <- Read10X_h5("/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE18/outs/filtered_feature_bc_matrix.h5")
E18 <- CreateSeuratObject(
  counts = counts$`Gene Expression`,
  assay = "RNA", project = "E18"
)

counts <- Read10X_h5("/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeP5/outs/filtered_feature_bc_matrix.h5")
P5 <- CreateSeuratObject(
  counts = counts$`Gene Expression`,
  assay = "RNA", project = "P5"
)


counts <- Read10X_h5("/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeAdult/outs/filtered_feature_bc_matrix.h5")
Adult <- CreateSeuratObject(
  counts = counts$`Gene Expression`,
  assay = "RNA", project = "Adult"
)


annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
seqlevelsStyle(annotation) <- "UCSC"
genome(annotation) <- "mm10"

peaks.E14 <- read.table(
  file = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE14/outs/atac_peaks.bed",
  col.names = c("chr", "start", "end")
)
peaks.E18 <- read.table(
  file = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE18/outs/atac_peaks.bed",
  col.names = c("chr", "start", "end")
)
peaks.P5 <- read.table(
  file = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeP5/outs/atac_peaks.bed",
  col.names = c("chr", "start", "end")
)
peaks.Adult <- read.table(
  file = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeAdult/outs/atac_peaks.bed",
  col.names = c("chr", "start", "end")
)

# convert to genomic ranges
gr.E14 <- makeGRangesFromDataFrame(peaks.E14)
gr.E18 <- makeGRangesFromDataFrame(peaks.E18)
gr.P5 <- makeGRangesFromDataFrame(peaks.P5)
gr.Adult <- makeGRangesFromDataFrame(peaks.Adult)

# Create a unified set of peaks to quantify in each dataset
combined.peaks <- reduce(x = c(gr.E14, gr.E18, gr.P5, gr.Adult))

# Filter out bad peaks based on length
peakwidths <- width(combined.peaks)
combined.peaks <- combined.peaks[peakwidths  < 10000 & peakwidths > 20]
combined.peaks



combined.peaks <- keepStandardChromosomes(combined.peaks, pruning.mode = "coarse")


md.E14 <- read.table(
  file = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE14/outs/per_barcode_metrics.csv",
  stringsAsFactors = FALSE,
  sep = ",",
  header = TRUE,
  row.names = 1
)[-1, ] # remove the first row

md.E18 <- read.table(
  file = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE18/outs/per_barcode_metrics.csv",
  stringsAsFactors = FALSE,
  sep = ",",
  header = TRUE,
  row.names = 1
)[-1, ]

md.P5 <- read.table(
  file = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeP5/outs/per_barcode_metrics.csv",
  stringsAsFactors = FALSE,
  sep = ",",
  header = TRUE,
  row.names = 1
)[-1, ]

md.Adult <- read.table(
  file = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeAdult/outs/per_barcode_metrics.csv",
  stringsAsFactors = FALSE,
  sep = ",",
  header = TRUE,
  row.names = 1
)[-1, ]


md.E14 <- md.E14[md.E14$atac_raw_reads > 1, ]
md.E18 <- md.E18[md.E18$atac_raw_reads > 1, ]
md.P5 <- md.P5[md.P5$atac_raw_reads > 1, ]
md.Adult <- md.Adult[md.Adult$atac_raw_reads > 1, ]


frags.E14 <- CreateFragmentObject(
  path = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE14/outs/atac_fragments.tsv.gz",
  cells = rownames(md.E14)
)

frags.E18 <- CreateFragmentObject(
  path = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE18/outs/atac_fragments.tsv.gz",
  cells = rownames(md.E18)
)

frags.P5 <- CreateFragmentObject(
  path = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeP5/outs/atac_fragments.tsv.gz",
  cells = rownames(md.P5)
)

frags.Adult <- CreateFragmentObject(
  path = "/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeAdult/outs/atac_fragments.tsv.gz",
  cells = rownames(md.Adult)
)




counts <- Read10X_h5("/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE14/outs/filtered_feature_bc_matrix.h5")

E14_RNA <- CreateSeuratObject(
  counts = counts$`Gene Expression`,
  assay = "RNA"
)

counts <- Read10X_h5("/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeE18/outs/filtered_feature_bc_matrix.h5")

E18_RNA <- CreateSeuratObject(
  counts = counts$`Gene Expression`,
  assay = "RNA"
)

counts <- Read10X_h5("/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeP5/outs/filtered_feature_bc_matrix.h5")

P5_RNA <- CreateSeuratObject(
  counts = counts$`Gene Expression`,
  assay = "RNA"
)

counts <- Read10X_h5("/Users/s204371/Desktop/single nuclei analysis/Cell_ranger_ATAC_GEX/MultiomeAdult/outs/filtered_feature_bc_matrix.h5")

Adult_RNA <- CreateSeuratObject(
  counts = counts$`Gene Expression`,
  assay = "RNA"
)

E14.counts <- FeatureMatrix(
  fragments = frags.E14,
  features = combined.peaks,
  cells = WhichCells(E14_RNA)
)

E18.counts <- FeatureMatrix(
  fragments = frags.E18,
  features = combined.peaks,
  cells = WhichCells(E18_RNA)
)

P5.counts <- FeatureMatrix(
  fragments = frags.P5,
  features = combined.peaks,
  cells = WhichCells(P5_RNA)
)

Adult.counts <- FeatureMatrix(
  fragments = frags.Adult,
  features = combined.peaks,
  cells = WhichCells(Adult_RNA)
)


E14_assay <- CreateChromatinAssay(E14.counts, fragments = frags.E14)
E14[["ATAC"]] <- E14_assay

E18_assay <- CreateChromatinAssay(E18.counts, fragments = frags.E18)
E18[["ATAC"]] <- E18_assay

P5_assay <- CreateChromatinAssay(P5.counts, fragments = frags.P5)
P5[["ATAC"]] <- P5_assay

Adult_assay <- CreateChromatinAssay(Adult.counts, fragments = frags.Adult)
Adult[["ATAC"]] <- Adult_assay



DefaultAssay(E14) <- 'ATAC'

DefaultAssay(E18) <- 'ATAC'

DefaultAssay(P5) <- 'ATAC'

DefaultAssay(Adult) <- 'ATAC'




E14 <- FindTopFeatures(E14, min.cutoff = 10)
E14 <- RunTFIDF(E14)
E14 <- RunSVD(E14)


E18 <- FindTopFeatures(E18, min.cutoff = 10)
E18 <- RunTFIDF(E18)
E18 <- RunSVD(E18)

P5 <- FindTopFeatures(P5, min.cutoff = 10)
P5 <- RunTFIDF(P5)
P5 <- RunSVD(P5)

Adult <- FindTopFeatures(Adult, min.cutoff = 10)
Adult <- RunTFIDF(Adult)
Adult <- RunSVD(Adult)




DefaultAssay(E14) <- 'RNA'

DefaultAssay(E18) <- 'RNA'

DefaultAssay(P5) <- 'RNA'

DefaultAssay(Adult) <- 'RNA'



E14$orig.ident <- 'E14'
E18$orig.ident <- 'E18'
P5$orig.ident <- 'P5'
Adult$orig.ident <- 'Adult'


mergeData <- merge(E14, y=c(E18, P5, Adult), add.cell.ids = c("E14", "E18", "P5", "Adult"), project = "Full Merge Project")

mergeData[["percent.mt"]] <- PercentageFeatureSet(mergeData, pattern = "^mt-")

mergeData <- subset(
  x = mergeData,
  subset = nCount_ATAC < 7e4 &
    nCount_ATAC > 400 &
    nCount_RNA < 25000 &
    nCount_RNA > 400 &
    percent.mt < 20
)

DefaultAssay(mergeData) <- 'RNA'

so_list_normalized<- SplitObject(object = mergeData, split.by = "orig.ident")

for (i in 1:length(x = so_list_normalized)) {
  so_list_normalized[[i]] <- NormalizeData(object = so_list_normalized[[i]], verbose = FALSE)
  so_list_normalized[[i]] <- FindVariableFeatures(object = so_list_normalized[[i]], selection.method = "vst", nfeatures = 2000, verbose = FALSE)
  so_list_normalized[[i]] <- PercentageFeatureSet(object = so_list_normalized[[i]], pattern = "^mt-", col.name = "percent.mt")
  so_list_normalized[[i]] <- SCTransform(object = so_list_normalized[[i]], method = "glmGamPoi", vars.to.regress = "percent.mt", verbose = FALSE)
  
}

#Set default assay to SCT for all objects in list 
for (i in seq_len(length(so_list_normalized))) {
  DefaultAssay(so_list_normalized[[i]]) <- "SCT"
}

#integrate RNA using rpca
features <- SelectIntegrationFeatures(so_list_normalized, nfeatures = 3000)
so_list_normalized <- PrepSCTIntegration(
  so_list_normalized,
  anchor.features = features
)
so_list_normalized <- lapply(
  X = so_list_normalized,
  FUN = RunPCA,
  features = features,
  verbose = FALSE
)
integration_anchors <- FindIntegrationAnchors(
  object.list = so_list_normalized,
  normalization.method = "SCT",
  anchor.features = features,
  dims = 1:30,
  reduction = "rpca",
  k.anchor = 20,
)
so <- IntegrateData(
  anchorset = integration_anchors,
  normalization.method = "SCT",
  new.assay.name = "integratedRNA",
  dims = 1:30
)

#run LSI on new seurat object with integrated RNA assay
DefaultAssay(so) <- "ATAC"
so <- RunTFIDF(so)
so <- FindTopFeatures(so, min.cutoff = "q25")
so <- RunSVD(so)

#integrate embeddings and output new object to prevent overwriting integrated RNA
#I can't quite remember why I did this the first time, but it was the work around that I needed
so_atac <- IntegrateEmbeddings(
  anchorset = integration_anchors,
  new.reduction.name = "integratedLSI",
  reductions = so@reductions$lsi
)

#copy integrated LSI from duplicate seurat object to original object
so@reductions$integratedLSI <- so_atac@reductions$integratedLSI

so <- FindMultiModalNeighbors(so, reduction.list = list("lsi", "integratedLSI"), dims.list = list(1:30, 2:30))

so <- RunUMAP(so, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
so <- FindClusters(so, graph.name = "wsnn", algorithm = 3, verbose = FALSE)
DimPlot(so, reduction = "wnn.umap", label = TRUE)


DefaultAssay(so) <- "integratedRNA"


# Run the standard workflow for visualization and clustering
so <- ScaleData(so, verbose = FALSE)
so <- RunPCA(so, npcs = 30, verbose = FALSE)
so <- RunUMAP(so, reduction = "pca", reduction.name = "umap.RNA",dims = 1:30)

DimPlot(so, reduction = "umap.RNA")

# ATAC analysis
DefaultAssay(so) <- "ATAC"
so <- RunTFIDF(so)
so <- FindTopFeatures(so, min.cutoff = 'q0')
so <- RunSVD(so)
so <- RunUMAP(so, reduction = "integratedLSI", reduction.name = "umap.atac", dims = 2:30,  reduction.key = 'ATACUMAP_')

DimPlot(so, reduction = "umap.atac")




new.cluster.ids <- c("Myonuclei", 
                     "Myonuclei",
                     "FAPs",
                     "FAPs",
                     "FAPs",
                     "Myonuclei",
                     "Myonuclei", 
                     "Myonuclei",
                     "Myonuclei",
                     "Myonuclei",
                     "MuSC",
                     "Myonuclei",
                     "Myoblast",
                     "Tenocyte",
                     "FAPs", 
                     "Myonuclei", "Tenocyte", "Tenocyte", "Enndothelial", "FAPs", "Tenocyte", "FAPs", "Macrophage", "Myonuclei", "Smooth muscle", "Adipocyte")
names(new.cluster.ids) <- levels(so)
so <- RenameIdents(so, new.cluster.ids)



DimPlot(so, reduction = "wnn.umap")

DimPlot(so, reduction = "umap.RNA")

DimPlot(so, reduction = "umap.atac")


DimPlot(so, reduction = "wnn.umap", group.by = "orig.ident")


DimPlot(so, reduction = "umap.RNA", group.by = "orig.ident")

DimPlot(so, reduction = "umap.atac", group.by = "orig.ident")


saveRDS(so, file = "/Users/s204371/Desktop/Analyse_WNN/so.rds")



# Run ChromVar

DefaultAssay(so) <- "ATAC"


annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
seqlevelsStyle(annotation) <- 'UCSC'
genome(annotation) <- "mm10"

Annotation(so) <- annotation


gene.activities <- GeneActivity(so)



pwm_set <- getMatrixSet(x = JASPAR2020, opts = list(species = 9606, all_versions = FALSE))
motif.matrix <- CreateMotifMatrix(features = granges(so), pwm = pwm_set, genome = 'BSgenome.Mmusculus.UCSC.mm10', use.counts = FALSE)
motif.object <- CreateMotifObject(data = motif.matrix, pwm = pwm_set)
so <- SetAssayData(so, assay = 'ATAC', slot = 'motifs', new.data = motif.object)


pfm <- getMatrixSet(
  x = JASPAR2020,
  opts = list(species = 9606, all_versions = FALSE)
)

# add motif information
so <- AddMotifs(
  object = so,
  genome = BSgenome.Mmusculus.UCSC.mm10,
  pfm = pfm
)




so <- RunChromVAR(
  object = so,
  genome = BSgenome.Mmusculus.UCSC.mm10
)




DefaultAssay(so) <- 'chromvar'


motif.name <- ConvertMotifID(so, name = 'MAF')
gene_plot <- FeaturePlot(so, features = "rna_Maf", reduction = 'wnn.umap')
motif_plot <- FeaturePlot(so, features = motif.name, min.cutoff = 0, cols = c("lightgrey", "darkred"), reduction = 'wnn.umap')
gene_plot | motif_plot




# Heatmap differential expressed genes Myonuclei



Myonuclei <- subset(so, idents = c("Myonuclei"))



Myonuclei <- FindMultiModalNeighbors(Myonuclei, reduction.list = list("lsi", "integratedLSI"), dims.list = list(1:30, 2:30))

Myonuclei <- RunUMAP(Myonuclei, nn.name = "weighted.nn", reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
Myonuclei <- FindClusters(Myonuclei, graph.name = "wsnn", algorithm = 3, verbose = FALSE)
DimPlot(Myonuclei, reduction = "wnn.umap", label = TRUE)





DefaultAssay(Myonuclei) <- "integratedRNA"


Myonuclei <- ScaleData(Myonuclei, verbose = FALSE)
Myonuclei <- RunPCA(Myonuclei, npcs = 30, verbose = FALSE)
Myonuclei <- RunUMAP(Myonuclei, reduction = "pca", reduction.name = "umap.RNA",dims = 1:30)






DefaultAssay(Myonuclei) <- "ATAC"
Myonuclei <- RunTFIDF(Myonuclei)
Myonuclei <- FindTopFeatures(Myonuclei, min.cutoff = 'q0')
Myonuclei <- RunSVD(Myonuclei)
Myonuclei <- RunUMAP(Myonuclei, reduction = "integratedLSI", reduction.name = "umap.atac", dims = 2:30,  reduction.key = 'ATACUMAP_')

DimPlot(Myonuclei, reduction = "umap.atac")



new.cluster.ids <- c("Myonuclei", 
                     "Myonuclei",
                     "Myonuclei",
                     "Myonuclei",
                     "Myonuclei",
                     "Myonuclei",
                     "Myonuclei", 
                     "Myonuclei",
                     "Myonuclei",
                     "Myonuclei",
                     "Myonuclei",
                     "Myonuclei")
names(new.cluster.ids) <- levels(Myonuclei)
Myonuclei <- RenameIdents(Myonuclei, new.cluster.ids)



DefaultAssay(Myonuclei) <- "RNA"

Myonuclei$celltype.orig.ident <- paste(Idents(Myonuclei), Myonuclei$orig.ident, sep = "_")
Myonuclei$celltype <- Idents(Myonuclei)
Idents(Myonuclei) <- "celltype.orig.ident"




all.genes <- rownames(Myonuclei)
Myonuclei<- ScaleData(Myonuclei, features = all.genes)


b.interferon.response <- FindMarkers(Myonuclei, ident.1 = "Myonuclei_E14", ident.2 = c("Myonuclei_E18", "Myonuclei_P5", "Myonuclei_Adult"), min.pct = 0.25, only.pos = TRUE)

b.interferon.response1 <- FindMarkers(Myonuclei, ident.1 = "Myonuclei_E18", ident.2 = c("Myonuclei_E14", "Myonuclei_P5", "Myonuclei_Adult"), min.pct = 0.25, only.pos = TRUE)

b.interferon.response2 <- FindMarkers(Myonuclei, ident.1 = "Myonuclei_P5", ident.2 = c("Myonuclei_E14", "Myonuclei_E18", "Myonuclei_Adult"), min.pct = 0.25, only.pos = TRUE)

b.interferon.response3 <- FindMarkers(Myonuclei, ident.1 = "Myonuclei_Adult", ident.2 = c("Myonuclei_E14", "Myonuclei_E18", "Myonuclei_P5"), min.pct = 0.25, only.pos = TRUE)



top30 <- head(b.interferon.response, n=15)
top30.1 <- head(b.interferon.response1, n=15)
top30.2 <- head(b.interferon.response2, n=15)
top30.3 <- head(b.interferon.response3, n=15)

DoHeatmap(Myonuclei, features = c(rownames(top30),rownames(top30.1),rownames(top30.2), rownames(top30.3)))


DoHeatmap(subset(Myonuclei, downsample = 200), features = c(rownames(top30),rownames(top30.1),rownames(top30.2),rownames(top30.3)), size = 3)+ scale_fill_gradientn(colors = c("blue", "white", "red"))




# Motif ATACseq


new.cluster.ids <- c("P5", 
                     "Adult",
                     "Adult",
                     "Adult",
                     "E18",
                     "Adult",
                     "Adult", 
                     "E14",
                     "E14",
                     "E18",
                     "E14",
                     "P5")
names(new.cluster.ids) <- levels(Myonuclei)
Myonuclei <- RenameIdents(Myonuclei, new.cluster.ids)

DefaultAssay(Myonuclei) <- "chromvar"


all.genes <- rownames(Myonuclei)
Myonuclei <- ScaleData(Myonuclei, features = all.genes)


my_levels <- c("E14", "E18", "P5", "Adult")

levels(Myonuclei) <- my_levels


Markers <- c("MA0867.2", "MA0163.1", "MA0868.2", "MA0759.1", "MA0765.2", "MA0809.2", "MA0599.1", "MA0500.2", "MA0808.1", "MA0665.1", "MA0716.1", "MA0670.1", "MA1643.1", "MA0161.2", "MA0671.1", "MA1520.1", "MA1112.2", "MA1574.1", "MA0112.3", "MA0843.1")

DoHeatmap(subset(Myonuclei, downsample = 100), features = Markers, size = 3) + scale_fill_gradientn(colors = c("blue", "white", "red")) 




# RNA+ATAC analysis


markers_rna <- presto:::wilcoxauc.Seurat(X = Myonuclei, group_by = 'seurat_clusters', assay = 'data', seurat_assay = 'SCT')

# Convert data with toupper function

markers_rna <- data.frame(lapply(markers_rna, function(variables) {
  if (is.character(variables)) {
    return(toupper(variables))
  } else {
    return(variables)
  }
}),
stringsAsFactors = FALSE)


markers_motifs <- presto:::wilcoxauc.Seurat(X = Myonuclei, group_by = 'seurat_clusters', assay = 'data', seurat_assay = 'chromvar')
motif.names <- markers_motifs$feature
colnames(markers_rna) <- paste0("RNA.", colnames(markers_rna))
colnames(markers_motifs) <- paste0("motif.", colnames(markers_motifs))
markers_rna$gene <- markers_rna$RNA.feature
markers_motifs$gene <- ConvertMotifID(Myonuclei, id = motif.names)



topTFs <- function(seurat_clusters, padj.cutoff = 1e-2) {
  ctmarkers_rna <- dplyr::filter(
    markers_rna, RNA.group == seurat_clusters, RNA.padj < padj.cutoff, RNA.logFC > 0) %>% 
    arrange(-RNA.auc)
  ctmarkers_motif <- dplyr::filter(
    markers_motifs, motif.group == seurat_clusters, motif.padj < padj.cutoff, motif.logFC > 0) %>% 
    arrange(-motif.auc)
  top_tfs <- inner_join(
    x = ctmarkers_rna[, c(2, 11, 6, 7)], 
    y = ctmarkers_motif[, c(2, 1, 11, 6, 7)], by = "gene"
  )
  top_tfs$avg_auc <- (top_tfs$RNA.auc + top_tfs$motif.auc) / 2
  top_tfs <- arrange(top_tfs, -avg_auc)
  return(top_tfs)
}

